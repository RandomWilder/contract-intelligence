name: Build Electron App Distribution

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual build version (e.g., v1.5.0)'
        required: false
        default: 'manual'

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  build:
    name: Build ${{ matrix.platform }} Electron App
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win
            artifact-name: Contract-Intelligence-Windows-Electron
            installer-ext: exe
          - os: macos-latest
            platform: mac
            artifact-name: Contract-Intelligence-macOS-Electron
            installer-ext: dmg

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: electron-app/package-lock.json

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('electron-app/python-backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Node.js dependencies
        working-directory: electron-app
        run: npm ci

      - name: Prepare portable Python for Windows
        if: matrix.platform == 'win'
        shell: bash
        working-directory: electron-app
        run: |
          # Download Python 3.12 embeddable package for Windows
          curl -L -o python-embed.zip https://www.python.org/ftp/python/3.12.5/python-3.12.5-embed-amd64.zip
          
          # Extract to python-portable directory
          mkdir -p python-portable
          cd python-portable
          unzip ../python-embed.zip
          
          # Enable site-packages by uncommenting import site in python312._pth
          sed -i 's/^#import site/import site/' python312._pth
          
          # Download and install pip
          curl -L -o get-pip.py https://bootstrap.pypa.io/get-pip.py
          ./python.exe get-pip.py --target Lib/site-packages
          
          # Install required packages
          ./python.exe -m pip install setuptools wheel --target Lib/site-packages
          ./python.exe -m pip install -r ../python-backend/requirements.txt --target Lib/site-packages

      - name: Prepare portable Python for macOS
        if: matrix.platform == 'mac'
        shell: bash
        working-directory: electron-app
        run: |
          # Download Python 3.12 for macOS (using python.org installer)
          curl -L -o python-installer.pkg https://www.python.org/ftp/python/3.12.5/python-3.12.5-macos11.pkg
          
          # Create a temporary directory to extract Python
          mkdir -p temp-python
          cd temp-python
          
          # Extract the installer
          xar -xf ../python-installer.pkg
          
          # Extract the Python framework
          cd Python_Framework.pkg
          cat Payload | gunzip -dc | cpio -i
          
          # Copy Python framework to python-portable
          cd ..
          mkdir -p ../python-portable
          cp -R Library/Frameworks/Python.framework/Versions/3.12/* ../python-portable/
          
          # Install pip and dependencies
          cd ../python-portable
          ./bin/python3 -m ensurepip
          ./bin/python3 -m pip install --upgrade pip
          ./bin/python3 -m pip install -r ../python-backend/requirements.txt

      - name: Verify backend preparation
        working-directory: electron-app
        run: |
          echo "Contents of python-backend directory:"
          ls -la python-backend/ || echo "python-backend directory not found"
          
          if [ "${{ matrix.platform }}" == "win" ]; then
            echo "Contents of python-portable directory:"
            ls -la python-portable/ || echo "python-portable directory not found"
          fi
        shell: bash

      - name: Update Electron app package.json version
        working-directory: electron-app
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
            npm version ${VERSION#v} --no-git-tag-version
          fi
        shell: bash

      - name: Verify build assets
        working-directory: electron-app
        run: |
          echo "Build assets verification:"
          ls -la build/ || echo "build directory not found"
          
          # Verify platform-specific icons exist
          if [[ "${{ matrix.platform }}" == "win" ]] && [ ! -f "build/icon.ico" ]; then
            echo "ERROR: build/icon.ico required for Windows build"
            exit 1
          fi
          
          if [[ "${{ matrix.platform }}" == "mac" ]] && [ ! -f "build/icon.icns" ]; then
            echo "ERROR: build/icon.icns required for macOS build"
            exit 1
          fi
          
          # Verify critical application files
          [ -f "main.js" ] || { echo "ERROR: main.js not found"; exit 1; }
          [ -f "package.json" ] || { echo "ERROR: package.json not found"; exit 1; }
          
          echo "All build assets verified successfully."
        shell: bash

      - name: Build Electron app (Windows)
        if: matrix.platform == 'win'
        working-directory: electron-app
        run: npm run build-win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (macOS)
        if: matrix.platform == 'mac'
        working-directory: electron-app
        run: npm run build-mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify build output
        working-directory: electron-app
        run: |
          echo "Build completed. Contents of dist directory:"
          ls -la dist/ || echo "No dist directory found"
          
          # List all built artifacts
          find dist/ -name "*.${{ matrix.installer-ext }}" || echo "No ${{ matrix.installer-ext }} files found"
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: electron-app/dist/*.${{ matrix.installer-ext }}
          retention-days: 90

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: Contract-Intelligence-Windows-Electron
          path: artifacts/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: Contract-Intelligence-macOS-Electron
          path: artifacts/

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release notes
        run: |
          cat > release_notes.md << 'EOF'
          # Contract Intelligence Platform ${{ steps.tag.outputs.tag }} - Electron Edition
          
          ## ðŸš€ Modern Desktop Application
          
          This release features the new **Electron-based desktop application** with enhanced features and better cross-platform compatibility.
          
          ### âœ¨ Key Features:
          - **Smart Semantic Chunking**: Advanced contract clause-based text segmentation
          - **RTL Language Support**: Full Hebrew/Arabic text support with proper number formatting
          - **Persistent Data Storage**: Documents remain available across app restarts
          - **Modern UI**: Clean, responsive interface with real-time notifications
          - **Enhanced OCR**: Improved Google Vision API integration
          - **Cross-Platform**: Native Windows and macOS applications
          
          ### ðŸ“¦ Installation:
          
          **Windows:**
          1. Download `Contract Intelligence Platform Setup *.exe`
          2. Run the installer and follow the setup wizard
          3. Launch the application from Start Menu or Desktop
          
          **macOS:**
          1. Download `Contract Intelligence Platform-*.dmg`
          2. Open the DMG and drag the app to Applications
          3. **IMPORTANT**: Right-click the app â†’ "Open" (bypasses security warning)
          4. Click "Open" when prompted about unidentified developer
          
          ### ðŸ”§ Requirements:
          - **OpenAI API Key** (for AI analysis)
          - **Google Cloud Vision credentials** (JSON file for OCR)
          - Windows 10+ or macOS 10.14+
          
          ### ðŸ“„ Migration from Streamlit Version:
          - The Electron app uses a separate database (`contracts_electron`)
          - Your existing Streamlit data remains untouched
          - Re-upload documents to use them in the Electron app
          
          ---
          **Build Date:** $(date -u)  
          **Commit:** ${GITHUB_SHA:0:7}  
          **Architecture:** Electron + Python FastAPI Backend
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Contract Intelligence ${{ steps.tag.outputs.tag }} - Electron
          body_path: release_notes.md
          files: |
            artifacts/*.exe
            artifacts/*.dmg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}