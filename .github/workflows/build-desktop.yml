name: Build Desktop Applications

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            executable_name: ContractIntelligence.exe
            artifact_name: ContractIntelligence-Windows
            build_command: python build_desktop.py
          - os: macos-latest
            executable_name: Contract Intelligence.app
            artifact_name: ContractIntelligence-macOS
            build_command: python build_desktop.py

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_desktop.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_desktop.txt

    - name: Build executable
      run: ${{ matrix.build_command }}

    - name: List dist directory (debug)
      run: |
        ls -la dist/ || dir dist\
      shell: bash

    - name: Package Windows executable
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        7z a -tzip "../${{ matrix.artifact_name }}.zip" ContractIntelligence/
      shell: cmd

    - name: Package macOS app bundle
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        zip -r "../${{ matrix.artifact_name }}.zip" "Contract Intelligence.app"

    - name: Upload Windows artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.zip
        retention-days: 30

    - name: Upload macOS artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.zip
        retention-days: 30

    - name: Upload to Release (if release)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ matrix.artifact_name }}.zip
        asset_name: ${{ matrix.artifact_name }}.zip
        asset_content_type: application/zip

  # Create release notes
  create-release-info:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Create Release Info
      run: |
        echo "## ðŸš€ Desktop Applications Built Successfully!" > release_info.md
        echo "" >> release_info.md
        echo "### ðŸ“¦ Available Downloads:" >> release_info.md
        echo "- **Windows**: ContractIntelligence-Windows.zip" >> release_info.md
        echo "- **macOS**: ContractIntelligence-macOS.zip" >> release_info.md
        echo "" >> release_info.md
        echo "### ðŸ“‹ Installation Instructions:" >> release_info.md
        echo "1. Download the appropriate ZIP file for your platform" >> release_info.md
        echo "2. Extract the ZIP file to any folder" >> release_info.md
        echo "3. Run the executable:" >> release_info.md
        echo "   - **Windows**: Double-click ContractIntelligence.exe" >> release_info.md
        echo "   - **macOS**: Double-click Contract Intelligence.app" >> release_info.md
        echo "4. Follow the setup wizard to enter your API keys" >> release_info.md
        echo "" >> release_info.md
        echo "### ðŸ”§ Requirements:" >> release_info.md
        echo "- OpenAI API Key" >> release_info.md
        echo "- Google Cloud Vision credentials (JSON file)" >> release_info.md
        echo "" >> release_info.md
        echo "Built on: $(date)" >> release_info.md
        
    - name: Upload Release Info
      uses: actions/upload-artifact@v4
      with:
        name: Release-Info
        path: release_info.md
