name: Build Electron App Distribution

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual build version (e.g., v1.5.0)'
        required: false
        default: 'manual'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  build:
    name: Build ${{ matrix.platform }} Electron App
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win
            artifact-name: Contract-Intelligence-Windows-Electron
            installer-ext: exe
          - os: macos-latest
            platform: mac
            artifact-name: Contract-Intelligence-macOS-Electron
            installer-ext: dmg

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: electron-app/package-lock.json

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node.js dependencies
        working-directory: electron-app
        run: npm ci

      - name: Install Python dependencies and PyInstaller
        working-directory: electron-app/python-backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Create PyInstaller spec file
        working-directory: electron-app/python-backend
        shell: bash
        run: |
          echo "Creating PyInstaller spec file for api_server_minimal.py..."
          
          # Write a simple spec file with essential components
          echo 'from PyInstaller.utils.hooks import collect_data_files, collect_submodules' > api_server_minimal.spec
          echo 'block_cipher = None' >> api_server_minimal.spec
          echo 'hiddenimports = [' >> api_server_minimal.spec
          echo '    "openai", "chromadb", "fastapi", "uvicorn", "starlette", "pydantic", "tiktoken", "google.auth", "contract_intelligence",' >> api_server_minimal.spec
          echo '    "uvicorn.logging", "uvicorn.loops", "uvicorn.loops.auto", "uvicorn.protocols", "uvicorn.protocols.http",' >> api_server_minimal.spec
          echo '    "uvicorn.protocols.http.auto", "uvicorn.protocols.websockets", "uvicorn.protocols.websockets.auto",' >> api_server_minimal.spec
          echo '    "uvicorn.lifespan", "uvicorn.lifespan.on", "uvicorn.lifespan.off",' >> api_server_minimal.spec
          echo '    "google.oauth2", "google.oauth2.service_account", "google.auth.transport.requests",' >> api_server_minimal.spec
          echo '    "googleapiclient", "googleapiclient.discovery", "googleapiclient.http",' >> api_server_minimal.spec
          echo '    "googleapiclient.errors", "chromadb.config", "chromadb.utils.embedding_functions",' >> api_server_minimal.spec
          echo '    "sentence_transformers", "sentence_transformers.models", "torch", "torch.nn",' >> api_server_minimal.spec
          echo '    "fitz", "docx", "contextlib", "asynccontextmanager",' >> api_server_minimal.spec
          echo '    "uuid", "io", "re", "math", "base64", "platform"' >> api_server_minimal.spec
          echo ']' >> api_server_minimal.spec
          echo 'datas = collect_data_files("chromadb") + collect_data_files("uvicorn")' >> api_server_minimal.spec
          echo 'a = Analysis(["api_server_minimal.py"], pathex=["."], hiddenimports=hiddenimports, datas=datas)' >> api_server_minimal.spec
          echo 'pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)' >> api_server_minimal.spec
          echo 'exe = EXE(pyz, a.scripts, a.binaries, a.zipfiles, a.datas, [], name="api_server", debug=False, strip=False, upx=True, runtime_tmpdir=None, console=True, argv_emulation=True)' >> api_server_minimal.spec
      
      - name: Build Python executable with PyInstaller
        working-directory: electron-app/python-backend
        shell: bash
        run: |
          echo "Building Python backend executable with PyInstaller..."
          
          # Use the spec file we created in the previous step
          pyinstaller api_server_minimal.spec --clean --noconfirm --distpath ../pyinstaller-dist
          
          # Verify the executable was created
          if [ "${{ matrix.platform }}" = "win" ]; then
            [ -f "../pyinstaller-dist/api_server.exe" ] || { echo "ERROR: api_server.exe not created"; exit 1; }
            echo "Windows executable created: ../pyinstaller-dist/api_server.exe"
            ls -la ../pyinstaller-dist/api_server.exe
            
            # Test Windows executable can run with verbose debug output
            echo "Testing Windows executable with full diagnostics..."
            cd .. && (./pyinstaller-dist/api_server.exe --test-only --verbose > backend_test_output.log 2>&1 || true)
            
            # Display test output for diagnosis
            echo "=== Backend Test Output ==="
            cat backend_test_output.log
            echo "=== End Test Output ==="
            
            # Check for critical errors in output
            if grep -q "ImportError\|ModuleNotFoundError" backend_test_output.log; then
              echo "CRITICAL: Missing dependencies detected in executable test"
              cat backend_test_output.log
              exit 1
            fi
          else
            [ -f "../pyinstaller-dist/api_server" ] || { echo "ERROR: api_server executable not created"; exit 1; }
            echo "macOS executable created: ../pyinstaller-dist/api_server"
            ls -la ../pyinstaller-dist/api_server
            
            # Ensure executable permissions on macOS
            echo "Setting executable permissions on macOS binary..."
            chmod +x ../pyinstaller-dist/api_server
            ls -la ../pyinstaller-dist/api_server
            
            # Test macOS executable can run with verbose debug output
            echo "Testing macOS executable with full diagnostics..."
            cd .. && (./pyinstaller-dist/api_server --test-only --verbose > backend_test_output.log 2>&1 || true)
            
            # Display test output for diagnosis
            echo "=== Backend Test Output ==="
            cat backend_test_output.log
            echo "=== End Test Output ==="
            
            # Check for critical errors in output
            if grep -q "ImportError\|ModuleNotFoundError" backend_test_output.log; then
              echo "CRITICAL: Missing dependencies detected in executable test"
              cat backend_test_output.log
              exit 1
            fi
          fi
          
          echo "PyInstaller build completed successfully"

      - name: Update package.json version
        working-directory: electron-app
        shell: bash
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
            # Remove 'v' prefix if present
            VERSION_CLEAN=${VERSION#v}
            echo "Target version: $VERSION_CLEAN"
            
            # Check current version in package.json
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "Current version: $CURRENT_VERSION"
            
            # Only update if versions differ
            if [ "$CURRENT_VERSION" != "$VERSION_CLEAN" ]; then
              echo "Updating version from $CURRENT_VERSION to $VERSION_CLEAN"
              npm version "$VERSION_CLEAN" --no-git-tag-version
            else
              echo "Version already correct: $CURRENT_VERSION - no update needed"
            fi
          else
            echo "Not a tag build, keeping current version"
          fi

      - name: Verify build prerequisites
        working-directory: electron-app
        shell: bash
        run: |
          echo "Verifying build prerequisites..."
          
          # Check required files exist
          [ -f "main.js" ] || { echo "ERROR: main.js not found"; exit 1; }
          [ -f "package.json" ] || { echo "ERROR: package.json not found"; exit 1; }
          [ -d "src" ] || { echo "ERROR: src directory not found"; exit 1; }
          [ -d "python-backend" ] || { echo "ERROR: python-backend directory not found"; exit 1; }
          
          # Check platform-specific icons
          if [ "${{ matrix.platform }}" = "win" ]; then
            [ -f "build/icon.ico" ] || { echo "ERROR: build/icon.ico required for Windows"; exit 1; }
          elif [ "${{ matrix.platform }}" = "mac" ]; then
            [ -f "build/icon.icns" ] || { echo "ERROR: build/icon.icns required for macOS"; exit 1; }
          fi
          
          echo "All prerequisites verified successfully"
          
      - name: Create template settings file
        working-directory: electron-app
        shell: bash
        run: |
          echo "Creating default app_settings.json template..."
          
          # Create default template with null values for sensitive fields
          echo '{"openai_api_key": null, "google_credentials_path": null, "chromadb_dir": "./chroma_db"}' > python-backend/app_settings.json.template
          echo "Created app_settings.json.template"
          
      - name: Sanitize any existing settings
        working-directory: electron-app
        shell: bash
        run: |
          # Check if app_settings.json exists and create a safe copy for the build
          if [ -f "python-backend/app_settings.json" ]; then
            echo "Creating safe app_settings.json for build (removing sensitive keys)..."
            
            # Create safe version with null values
            echo '{"openai_api_key": null, "google_credentials_path": null, "chromadb_dir": "./chroma_db"}' > python-backend/app_settings.json.safe
            
            # Temporarily replace the real settings with safe settings for the build
            mv python-backend/app_settings.json python-backend/app_settings.json.bak
            mv python-backend/app_settings.json.safe python-backend/app_settings.json
          fi

      - name: Prepare PyInstaller files for electron-builder
        working-directory: electron-app
        shell: bash
        run: |
          echo "Preparing PyInstaller files for electron-builder..."
          ls -la pyinstaller-dist/ || { echo "ERROR: pyinstaller-dist directory not found"; exit 1; }
          
          # Create resources directory for electron-builder
          mkdir -p resources
          
          # Copy the executable based on platform
          if [ "${{ matrix.platform }}" = "win" ]; then
            [ -f "pyinstaller-dist/api_server.exe" ] || { echo "ERROR: api_server.exe not found"; exit 1; }
            cp pyinstaller-dist/api_server.exe resources/
            # Set executable permissions on Windows
            chmod +x resources/api_server.exe
            echo "Windows executable copied to resources/api_server.exe with executable permissions"
            ls -la resources/api_server.exe
          else
            [ -f "pyinstaller-dist/api_server" ] || { echo "ERROR: api_server not found"; exit 1; }
            cp pyinstaller-dist/api_server resources/
            # Set executable permissions on macOS
            chmod +x resources/api_server
            echo "macOS executable copied to resources/api_server with executable permissions"
            ls -la resources/api_server
          fi
          
          # Copy the app_settings template to resources for first-time setup
          cp python-backend/app_settings.json.template resources/
          echo "Default settings template copied to resources/"
          
          # Restore original app_settings.json if it was backed up
          if [ -f "python-backend/app_settings.json.bak" ]; then
            mv python-backend/app_settings.json.bak python-backend/app_settings.json
            echo "Restored original app_settings.json from backup"
          fi

      - name: Verify no sensitive data in build
        working-directory: electron-app
        shell: bash
        run: |
          echo "Checking for sensitive data in resources and build files..."
          
          # Check if API keys or sensitive patterns exist in resources
          echo "Checking resources directory for sensitive data..."
          if [ -d "resources" ]; then
            # Look for OpenAI API key patterns (with safe grep handling)
            if grep -r "sk-[a-zA-Z0-9]" --include="*.json" resources/ > /dev/null 2>&1; then
              echo "WARNING: Potential OpenAI API key found in resources! Replacing with null..."
              find resources/ -name "*.json" -exec sed -i 's/"openai_api_key": "sk-[^"]*"/"openai_api_key": null/g' {} \;
            fi
            
            # Check for other sensitive files
            if [ -f "resources/google_service_account.json" ] || [ -f "resources/google_credentials.json" ]; then
              echo "WARNING: Google credentials found in resources directory!"
              rm -f resources/google_service_account.json resources/google_credentials.json
              echo "Removed sensitive credential files from resources"
            fi
            
            echo "Resources checked and sanitized for sensitive data"
          fi
          
          # Final verification that template contains no actual API keys
          if [ -f "resources/app_settings.json.template" ]; then
            if grep -q "sk-" resources/app_settings.json.template; then
              echo "ERROR: Template contains real API keys! Fixing..."
              echo '{"openai_api_key": null, "google_credentials_path": null, "chromadb_dir": "./chroma_db"}' > resources/app_settings.json.template
            else
              echo "Template is properly sanitized (no API keys)"
            fi
          fi

      - name: Verify final build structure
        working-directory: electron-app
        shell: bash
        run: |
          echo "Final verification before electron-builder..."
          echo "Current directory contents:"
          ls -la
          echo ""
          echo "Resources directory contents:"
          ls -la resources/ || echo "No resources directory"
          echo ""
          echo "Package.json extraResources configuration:"
          grep -A 10 "extraResources" package.json || echo "No extraResources found"

      - name: Build Electron app
        working-directory: electron-app
        shell: bash
        run: |
          echo "Starting electron-builder with comprehensive configuration..."
          
          # Set additional environment variables for electron-builder
          export DEBUG=electron-builder*
          export ELECTRON_CACHE=${{ runner.temp }}/electron-cache
          export ELECTRON_BUILDER_CACHE=${{ runner.temp }}/electron-builder-cache
          
          # Ensure directories exist
          mkdir -p "$ELECTRON_CACHE" "$ELECTRON_BUILDER_CACHE"
          
          # Build with platform-specific command
          if [ "${{ matrix.platform }}" = "win" ]; then
            echo "Building for Windows with NSIS..."
            npm run build-win -- --publish=never
          elif [ "${{ matrix.platform }}" = "mac" ]; then
            echo "Building for macOS with DMG..."
            npm run build-mac -- --publish=never
          else
            echo "Building for current platform..."
            npm run build -- --publish=never
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true

      - name: Verify build output
        working-directory: electron-app
        shell: bash
        run: |
          echo "Build completed. Verifying output..."
          
          if [ ! -d "dist" ]; then
            echo "ERROR: No dist directory found"
            exit 1
          fi
          
          echo "Contents of dist directory:"
          ls -la dist/
          
          # Check for expected installer files
          INSTALLER_COUNT=$(find dist/ -name "*.${{ matrix.installer-ext }}" | wc -l)
          if [ "$INSTALLER_COUNT" -eq 0 ]; then
            echo "ERROR: No ${{ matrix.installer-ext }} files found in dist/"
            exit 1
          fi
          
          echo "Build verification successful: Found $INSTALLER_COUNT installer file(s)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: electron-app/dist/*.${{ matrix.installer-ext }}
          retention-days: 90

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: Contract-Intelligence-Windows-Electron
          path: artifacts/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: Contract-Intelligence-macOS-Electron
          path: artifacts/

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release notes
        run: |
          # Write release notes to a file
          {
            echo "# Contract Intelligence Platform ${{ steps.tag.outputs.tag }} - Electron Edition"
            echo ""
            echo "## Modern Desktop Application"
            echo ""
            echo "This release features the **Electron-based desktop application** with enhanced features and cross-platform compatibility."
            echo ""
            echo "### Key Features:"
            echo "- **Smart Contract Analysis**: Advanced AI-powered contract intelligence"
            echo "- **RTL Language Support**: Full Hebrew/Arabic text support with proper formatting"
            echo "- **Persistent Data Storage**: Documents remain available across app restarts"
            echo "- **Modern UI**: Clean, responsive interface with real-time notifications"
            echo "- **Enhanced OCR**: Improved Google Vision API integration"
            echo "- **Cross-Platform**: Native Windows and macOS applications"
            echo ""
            echo "### Installation:"
            echo ""
            echo "**Windows:**"
            echo "1. Download \`Contract Intelligence Platform Setup *.exe\`"
            echo "2. Run the installer and follow the setup wizard"
            echo "3. Launch from Start Menu or Desktop shortcut"
            echo ""
            echo "**macOS:**"
            echo "1. Download \`Contract Intelligence Platform-*.dmg\`"
            echo "2. Open the DMG and drag the app to Applications folder"
            echo "3. **IMPORTANT**: Right-click the app → \"Open\" to bypass security warning"
            echo "4. Click \"Open\" when prompted about unidentified developer"
            echo ""
            echo "### Requirements:"
            echo "- **OpenAI API Key** (required for AI analysis)"
            echo "- **Google Cloud Vision credentials** (JSON file for OCR functionality)"
            echo "- Windows 10+ or macOS 10.14+"
            echo ""
            echo "### Notes:"
            echo "- The Electron app uses a separate database for data isolation"
            echo "- Your existing data remains untouched in other versions"
            echo "- First-time setup will guide you through API configuration"
            echo ""
            echo "---"
            echo "**Build Date:** $(date -u)"
            echo "**Commit:** ${GITHUB_SHA:0:7}"
            echo "**Architecture:** Electron + Python FastAPI Backend"
          } > release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Contract Intelligence ${{ steps.tag.outputs.tag }} - Electron
          body_path: release_notes.md
          files: artifacts/*.exe,artifacts/*.dmg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}