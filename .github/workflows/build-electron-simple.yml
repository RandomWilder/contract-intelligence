name: Build Electron App Distribution

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual build version (e.g., v1.5.0)'
        required: false
        default: 'manual'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  build:
    name: Build ${{ matrix.platform }} Electron App
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win
            artifact-name: Contract-Intelligence-Windows-Electron
            installer-ext: exe
          - os: macos-latest
            platform: mac
            artifact-name: Contract-Intelligence-macOS-Electron
            installer-ext: dmg

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: electron-app/package-lock.json

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node.js dependencies
        working-directory: electron-app
        run: npm ci

      - name: Install Python dependencies and PyInstaller
        working-directory: electron-app/python-backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Python executable with PyInstaller
        working-directory: electron-app
        shell: bash
        run: |
          echo "Building Python backend executable with PyInstaller..."
          
          # Create PyInstaller spec file for better control
          cat > api_server.spec << 'EOF'
          # -*- mode: python ; coding: utf-8 -*-

          block_cipher = None

          a = Analysis(
              ['python-backend/api_server_minimal.py'],
              pathex=[],
              binaries=[],
              datas=[
                  ('python-backend/requirements.txt', '.'),
              ],
              hiddenimports=[
                  # Standard library modules
                  'tempfile',
                  'shutil',
                  'logging',
                  're',
                  'codecs',
                  'contextlib',
                  'pathlib',
                  'typing',
                  'sqlite3',
                  'pickle',
                  'json',
                  # FastAPI and Uvicorn
                  'uvicorn',
                  'uvicorn.lifespan',
                  'uvicorn.lifespan.on',
                  'uvicorn.protocols',
                  'uvicorn.protocols.websockets',
                  'uvicorn.protocols.websockets.auto',
                  'uvicorn.protocols.http',
                  'uvicorn.protocols.http.auto',
                  'uvicorn.protocols.http.h11_impl',
                  'uvicorn.protocols.http.httptools_impl',
                  'uvicorn.loops',
                  'uvicorn.loops.auto',
                  'fastapi',
                  'fastapi.applications',
                  'fastapi.routing',
                  'fastapi.middleware',
                  'fastapi.middleware.cors',
                  'starlette',
                  'starlette.applications',
                  'starlette.routing',
                  'starlette.middleware',
                  'starlette.middleware.cors',
                  # AI and ML
                  'openai',
                  'tiktoken',
                  # ChromaDB
                  'chromadb',
                  'chromadb.config',
                  'chromadb.api',
                  'chromadb.db',
                  'chromadb.utils',
                  'chromadb.utils.embedding_functions',
                  'chromadb.utils.embedding_functions.openai_embedding_function',
                  # Google Cloud and Auth
                  'google.auth',
                  'google.auth.transport',
                  'google.auth.transport.requests',
                  'google_auth_oauthlib',
                  'google_auth_oauthlib.flow',
                  'google.oauth2.credentials',
                  'google.cloud',
                  'google.cloud.vision',
                  'requests',
                  'requests.auth',
                  'requests.adapters',
                  # Document processing
                  'PIL',
                  'PIL.Image',
                  'PyPDF2',
                  'docx',
                  'fitz',
                  # Data processing
                  'pandas',
                  'numpy',
                  # Environment and config
                  'dotenv',
                  # Custom modules
                  'contract_intelligence',
                  # **FIX #9: Windows runtime dependencies**
                  'win32api', 'win32con', 'win32gui', 'win32process', 'win32security', 'win32service', 'win32serviceutil', 'win32event', 'win32file',
                  # **FIX #9: Additional system modules**
                  'multiprocessing', 'multiprocessing.spawn', 'multiprocessing.util',
                  'concurrent', 'concurrent.futures', 'concurrent.futures.thread',
                  'asyncio', 'asyncio.events', 'asyncio.selector_events', 'asyncio.windows_events'
          ],
          hookspath=[],
          hooksconfig={},
          runtime_hooks=[],
          excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='api_server',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=True,  # Enable argv emulation for macOS compatibility
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          EOF
          
          # Build the executable with custom output directory
          pyinstaller api_server.spec --clean --noconfirm --distpath pyinstaller-dist
          
          # Verify the executable was created
          if [ "${{ matrix.platform }}" = "win" ]; then
            [ -f "pyinstaller-dist/api_server.exe" ] || { echo "ERROR: api_server.exe not created"; exit 1; }
            echo "Windows executable created: pyinstaller-dist/api_server.exe"
            ls -la pyinstaller-dist/api_server.exe
            
            # **FIX #8: Test Windows executable can run**
            echo "Testing Windows executable..."
            ./pyinstaller-dist/api_server.exe --help || echo "WARNING: Executable test failed, but continuing..."
          else
            [ -f "pyinstaller-dist/api_server" ] || { echo "ERROR: api_server executable not created"; exit 1; }
            echo "macOS executable created: pyinstaller-dist/api_server"
            ls -la pyinstaller-dist/api_server
            
            # **FIX #7: Ensure executable permissions on macOS**
            echo "Setting executable permissions on macOS binary..."
            chmod +x pyinstaller-dist/api_server
            ls -la pyinstaller-dist/api_server
            
            # **FIX #8: Test macOS executable can run**
            echo "Testing macOS executable..."
            ./pyinstaller-dist/api_server --help || echo "WARNING: Executable test failed, but continuing..."
          fi
          
          echo "PyInstaller build completed successfully"

      - name: Update package.json version
        working-directory: electron-app
        shell: bash
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
            # Remove 'v' prefix if present
            VERSION_CLEAN=${VERSION#v}
            echo "Target version: $VERSION_CLEAN"
            
            # Check current version in package.json
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "Current version: $CURRENT_VERSION"
            
            # Only update if versions differ
            if [ "$CURRENT_VERSION" != "$VERSION_CLEAN" ]; then
              echo "Updating version from $CURRENT_VERSION to $VERSION_CLEAN"
              npm version "$VERSION_CLEAN" --no-git-tag-version
            else
              echo "Version already correct: $CURRENT_VERSION - no update needed"
            fi
          else
            echo "Not a tag build, keeping current version"
          fi

      - name: Verify build prerequisites
        working-directory: electron-app
        shell: bash
        run: |
          echo "Verifying build prerequisites..."
          
          # Check required files exist
          [ -f "main.js" ] || { echo "ERROR: main.js not found"; exit 1; }
          [ -f "package.json" ] || { echo "ERROR: package.json not found"; exit 1; }
          [ -d "src" ] || { echo "ERROR: src directory not found"; exit 1; }
          [ -d "python-backend" ] || { echo "ERROR: python-backend directory not found"; exit 1; }
          
          # Check platform-specific icons
          if [ "${{ matrix.platform }}" = "win" ]; then
            [ -f "build/icon.ico" ] || { echo "ERROR: build/icon.ico required for Windows"; exit 1; }
          elif [ "${{ matrix.platform }}" = "mac" ]; then
            [ -f "build/icon.icns" ] || { echo "ERROR: build/icon.icns required for macOS"; exit 1; }
          fi
          
          echo "All prerequisites verified successfully"

      - name: Prepare PyInstaller files for electron-builder
        working-directory: electron-app
        shell: bash
        run: |
          echo "Preparing PyInstaller files for electron-builder..."
          ls -la pyinstaller-dist/ || { echo "ERROR: pyinstaller-dist directory not found"; exit 1; }
          
          # Create resources directory for electron-builder
          mkdir -p resources
          
          if [ "${{ matrix.platform }}" = "win" ]; then
            [ -f "pyinstaller-dist/api_server.exe" ] || { echo "ERROR: api_server.exe not found"; exit 1; }
            cp pyinstaller-dist/api_server.exe resources/
            echo "✅ Windows executable copied to resources/api_server.exe"
            ls -la resources/api_server.exe
          else
            [ -f "pyinstaller-dist/api_server" ] || { echo "ERROR: api_server not found"; exit 1; }
            cp pyinstaller-dist/api_server resources/
            chmod +x resources/api_server
            echo "✅ macOS executable copied to resources/api_server"
            ls -la resources/api_server
          fi

      - name: Verify final build structure
        working-directory: electron-app
        shell: bash
        run: |
          echo "Final verification before electron-builder..."
          echo "Current directory contents:"
          ls -la
          echo ""
          echo "Resources directory contents:"
          ls -la resources/ || echo "No resources directory"
          echo ""
          echo "Package.json extraResources configuration:"
          grep -A 10 "extraResources" package.json || echo "No extraResources found"

      - name: Build Electron app
        working-directory: electron-app
        shell: bash
        run: |
          echo "Starting electron-builder with comprehensive configuration..."
          
          # Set additional environment variables for electron-builder
          export DEBUG=electron-builder*
          export ELECTRON_CACHE=${{ runner.temp }}/electron-cache
          export ELECTRON_BUILDER_CACHE=${{ runner.temp }}/electron-builder-cache
          
          # Ensure directories exist
          mkdir -p "$ELECTRON_CACHE" "$ELECTRON_BUILDER_CACHE"
          
          # Build with platform-specific command
          if [ "${{ matrix.platform }}" = "win" ]; then
            echo "Building for Windows with NSIS..."
            npm run build-win -- --publish=never
          elif [ "${{ matrix.platform }}" = "mac" ]; then
            echo "Building for macOS with DMG..."
            npm run build-mac -- --publish=never
          else
            echo "Building for current platform..."
            npm run build -- --publish=never
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true

      - name: Verify build output
        working-directory: electron-app
        shell: bash
        run: |
          echo "Build completed. Verifying output..."
          
          if [ ! -d "dist" ]; then
            echo "ERROR: No dist directory found"
            exit 1
          fi
          
          echo "Contents of dist directory:"
          ls -la dist/
          
          # Check for expected installer files
          INSTALLER_COUNT=$(find dist/ -name "*.${{ matrix.installer-ext }}" | wc -l)
          if [ "$INSTALLER_COUNT" -eq 0 ]; then
            echo "ERROR: No ${{ matrix.installer-ext }} files found in dist/"
            exit 1
          fi
          
          echo "Build verification successful: Found $INSTALLER_COUNT installer file(s)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: electron-app/dist/*.${{ matrix.installer-ext }}
          retention-days: 90

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: Contract-Intelligence-Windows-Electron
          path: artifacts/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: Contract-Intelligence-macOS-Electron
          path: artifacts/

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release notes
        run: |
          cat > release_notes.md << 'EOF'
          # Contract Intelligence Platform ${{ steps.tag.outputs.tag }} - Electron Edition
          
          ## 🚀 Modern Desktop Application
          
          This release features the **Electron-based desktop application** with enhanced features and cross-platform compatibility.
          
          ### ✨ Key Features:
          - **Smart Contract Analysis**: Advanced AI-powered contract intelligence
          - **RTL Language Support**: Full Hebrew/Arabic text support with proper formatting
          - **Persistent Data Storage**: Documents remain available across app restarts
          - **Modern UI**: Clean, responsive interface with real-time notifications
          - **Enhanced OCR**: Improved Google Vision API integration
          - **Cross-Platform**: Native Windows and macOS applications
          
          ### 📦 Installation:
          
          **Windows:**
          1. Download `Contract Intelligence Platform Setup *.exe`
          2. Run the installer and follow the setup wizard
          3. Launch from Start Menu or Desktop shortcut
          
          **macOS:**
          1. Download `Contract Intelligence Platform-*.dmg`
          2. Open the DMG and drag the app to Applications folder
          3. **IMPORTANT**: Right-click the app → "Open" to bypass security warning
          4. Click "Open" when prompted about unidentified developer
          
          ### 🔧 Requirements:
          - **OpenAI API Key** (required for AI analysis)
          - **Google Cloud Vision credentials** (JSON file for OCR functionality)
          - Windows 10+ or macOS 10.14+
          
          ### 📄 Notes:
          - The Electron app uses a separate database for data isolation
          - Your existing data remains untouched in other versions
          - First-time setup will guide you through API configuration
          
          ---
          **Build Date:** $(date -u)  
          **Commit:** ${GITHUB_SHA:0:7}  
          **Architecture:** Electron + Python FastAPI Backend
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Contract Intelligence ${{ steps.tag.outputs.tag }} - Electron
          body_path: release_notes.md
          files: |
            artifacts/*.exe
            artifacts/*.dmg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
