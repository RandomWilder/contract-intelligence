name: Build & Release Desktop Applications

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
      - 'v*.*'    # Also supports v1.0, v2.0 format
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: 'latest'
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: 'ContractIntelligence'

jobs:
  # Test job to ensure code quality before building
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_desktop.txt

      - name: Run basic tests
        run: |
          python -c "import streamlit, openai, chromadb; print('✅ Core dependencies OK')"
          python -c "from desktop_launcher import ContractIntelligenceSetup; print('✅ Desktop launcher OK')"
          python -c "from telemetry_client import TelemetryClient; print('✅ Telemetry client OK')"

  # Build job for both platforms
  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact_name: ContractIntelligence-Windows
            executable_ext: .exe
            package_cmd: 7z a -tzip
          - os: macos-latest
            platform: macos
            artifact_name: ContractIntelligence-macOS
            executable_ext: .app
            package_cmd: zip -r

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_desktop.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_desktop.txt

      - name: Verify installation
        run: |
          python -c "import sys; print(f'Python: {sys.version}')"
          python -c "import pyinstaller; print(f'PyInstaller: {pyinstaller.__version__}')"
          python -c "import streamlit; print(f'Streamlit: {streamlit.__version__}')"

      - name: Create version info
        shell: bash
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "BUILD_VERSION=${{ github.event.inputs.version || 'dev' }}-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Build executable (Windows)
        if: matrix.platform == 'windows'
        shell: cmd
        run: |
          echo Building Windows executable...
          python -m PyInstaller ^
            --name=ContractIntelligence ^
            --onedir ^
            --windowed ^
            --distpath=dist ^
            --workpath=build ^
            --specpath=. ^
            --add-data="streamlit_app.py;." ^
            --add-data="local_rag_app.py;." ^
            --add-data="contract_intelligence.py;." ^
            --add-data="telemetry_client.py;." ^
            --add-data="simple_ocr.py;." ^
            --add-data="requirements_desktop.txt;." ^
            --hidden-import=streamlit ^
            --hidden-import=streamlit.web.cli ^
            --hidden-import=streamlit.runtime ^
            --hidden-import=openai ^
            --hidden-import=chromadb ^
            --hidden-import=google.auth ^
            --hidden-import=google_auth_oauthlib ^
            --hidden-import=google.cloud.vision ^
            --hidden-import=PyPDF2 ^
            --hidden-import=docx ^
            --hidden-import=cv2 ^
            --hidden-import=PIL ^
            --hidden-import=tkinter ^
            --collect-all=streamlit ^
            --collect-all=altair ^
            --collect-all=plotly ^
            desktop_launcher.py

      - name: Build executable (macOS)
        if: matrix.platform == 'macos'
        run: |
          echo "Building macOS executable..."
          python -m PyInstaller \
            --name="Contract Intelligence" \
            --onedir \
            --windowed \
            --distpath=dist \
            --workpath=build \
            --specpath=. \
            --add-data="streamlit_app.py:." \
            --add-data="local_rag_app.py:." \
            --add-data="contract_intelligence.py:." \
            --add-data="telemetry_client.py:." \
            --add-data="simple_ocr.py:." \
            --add-data="requirements_desktop.txt:." \
            --hidden-import=streamlit \
            --hidden-import=streamlit.web.cli \
            --hidden-import=streamlit.runtime \
            --hidden-import=openai \
            --hidden-import=chromadb \
            --hidden-import=google.auth \
            --hidden-import=google_auth_oauthlib \
            --hidden-import=google.cloud.vision \
            --hidden-import=PyPDF2 \
            --hidden-import=docx \
            --hidden-import=cv2 \
            --hidden-import=PIL \
            --hidden-import=tkinter \
            --collect-all=streamlit \
            --collect-all=altair \
            --collect-all=plotly \
            desktop_launcher.py

      - name: Verify build output
        shell: bash
        run: |
          echo "=== Build Output ==="
          ls -la dist/ || dir dist\
          if [ "${{ matrix.platform }}" == "windows" ]; then
            ls -la "dist/ContractIntelligence/" || dir "dist\ContractIntelligence\"
          else
            ls -la "dist/Contract Intelligence.app/" || true
          fi

      - name: Create version file
        shell: bash
        run: |
          cat > dist/VERSION.txt << EOF
          Contract Intelligence Platform
          Version: ${{ env.BUILD_VERSION }}
          Built: ${{ env.BUILD_DATE }}
          Commit: ${{ env.COMMIT_SHA }}
          Platform: ${{ matrix.platform }}
          Python: ${{ env.PYTHON_VERSION }}
          EOF

      - name: Package application (Windows)
        if: matrix.platform == 'windows'
        shell: cmd
        run: |
          cd dist
          copy ..\VERSION.txt ContractIntelligence\
          7z a -tzip "../${{ matrix.artifact_name }}.zip" ContractIntelligence\

      - name: Package application (macOS)
        if: matrix.platform == 'macos'
        run: |
          cd dist
          cp ../VERSION.txt "Contract Intelligence.app/"
          zip -r "../${{ matrix.artifact_name }}.zip" "Contract Intelligence.app"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip
          retention-days: 30
          compression-level: 6

      - name: Upload to release (if release event)
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.artifact_name }}.zip
          asset_name: ${{ matrix.artifact_name }}.zip
          asset_content_type: application/zip

  # Create release notes and summary
  release-info:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          # 🚀 Contract Intelligence Platform - Desktop Release
          
          ## 📦 Downloads
          - **Windows**: `ContractIntelligence-Windows.zip`
          - **macOS**: `ContractIntelligence-macOS.zip`
          
          ## 🔧 Installation
          1. Download the appropriate ZIP file for your platform
          2. Extract to any folder (e.g., Desktop, Applications)
          3. Run the executable:
             - **Windows**: Double-click `ContractIntelligence.exe`
             - **macOS**: Double-click `Contract Intelligence.app`
          4. Follow the setup wizard to configure your API keys
          
          ## 📋 Requirements
          - OpenAI API Key (required)
          - Google Cloud Vision credentials JSON file (required)
          - Internet connection for API calls
          
          ## ✨ Features
          - 🤖 AI-powered contract analysis
          - 👁️ Google Vision OCR for document processing
          - 🌐 Local-first data storage
          - 🔒 Secure credential management
          - 📊 Optional anonymous telemetry
          - 🌍 Hebrew/RTL language support
          
          ## 🆕 What's New
          - Cross-platform desktop distribution
          - Enhanced setup wizard with paste support
          - Improved error handling and logging
          - Modern UI with RTL support
          
          ---
          Built on: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          Commit: ${{ github.sha }}
          EOF

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: Release-Notes
          path: RELEASE_NOTES.md
          retention-days: 30
