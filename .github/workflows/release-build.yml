name: Release Build - Cross-Platform Desktop

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3
      - 'v*.*'    # Also supports v1.0, v2.0 format
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual build version (e.g., v1.0.0)'
        required: false
        default: 'manual'

env:
  PYTHON_VERSION: '3.10'

jobs:
  build:
    name: Build ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            os-name: Windows
            artifact-name: ContractIntelligence-Windows
            executable-name: ContractIntelligence.exe
          - os: macos-latest
            os-name: macOS
            artifact-name: ContractIntelligence-macOS
            executable-name: Contract Intelligence.app

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install macOS system dependencies
      if: matrix.os == 'macos-latest'
      run: |
        echo "Installing macOS-specific dependencies..."
        brew update
        brew install gettext
        brew link --force gettext
        echo "gettext/libintl installed and linked"

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: x64

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements_desktop.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_desktop.txt

    - name: Set macOS build environment
      if: matrix.os == 'macos-latest'
      run: |
        echo "Setting up macOS build environment..."
        export PATH="/opt/homebrew/bin:$PATH"
        export LDFLAGS="-L/opt/homebrew/lib $LDFLAGS"
        export CPPFLAGS="-I/opt/homebrew/include $CPPFLAGS"
        export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH"
        echo "PATH=/opt/homebrew/bin:$PATH" >> $GITHUB_ENV
        echo "LDFLAGS=-L/opt/homebrew/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/include" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig" >> $GITHUB_ENV
        echo "macOS environment configured"

    - name: Build desktop application
      run: python build_desktop.py

    - name: Verify build output (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path "dist/ContractIntelligence") {
          Write-Host "[SUCCESS] Windows build directory found"
          Get-ChildItem "dist/ContractIntelligence" | ForEach-Object { Write-Host "  - $($_.Name)" }
        } else {
          Write-Host "[ERROR] Windows build directory not found"
          exit 1
        }

    - name: Verify build output (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        if [ -d "dist/Contract Intelligence.app" ]; then
          echo "[SUCCESS] macOS app bundle found"
          ls -la "dist/Contract Intelligence.app/Contents/"
        else
          echo "[ERROR] macOS app bundle not found"
          exit 1
        fi

    - name: Create Windows ZIP
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        Compress-Archive -Path "ContractIntelligence" -DestinationPath "../${{ matrix.artifact-name }}.zip"

    - name: Create macOS ZIP
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        # Create proper ZIP without extra compression
        zip -r -y "../${{ matrix.artifact-name }}.zip" "Contract Intelligence.app"
        
        # Create installation instructions
        cat > ../MACOS_INSTALL.txt << 'EOF'
        # macOS Installation Instructions
        
        ## Step 1: Extract the ZIP
        1. Double-click ContractIntelligence-macOS.zip to extract
        2. You should see "Contract Intelligence.app"
        
        ## Step 2: Bypass Apple Security Warning
        Since this app is not signed with Apple Developer certificate:
        
        1. Right-click on "Contract Intelligence.app"
        2. Select "Open" from the context menu
        3. Click "Open" when the security dialog appears
        4. The app will now run and be trusted for future launches
        
        Alternative method:
        1. Go to System Preferences > Security & Privacy
        2. Click "Open Anyway" if you see the app listed
        
        ## Step 3: Setup
        1. Enter your OpenAI API Key
        2. Upload your Google Cloud Vision credentials JSON file
        3. Start using Contract Intelligence!
        
        ## Requirements
        - macOS 10.14 or later
        - OpenAI API Key
        - Google Cloud Vision credentials
        EOF

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.artifact-name }}.zip
        retention-days: 90

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: ContractIntelligence-Windows
        path: artifacts/

    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: ContractIntelligence-macOS
        path: artifacts/

    - name: Get tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create release notes
      run: |
        cat > release_notes.md << EOF
        # Contract Intelligence Platform ${{ steps.tag.outputs.tag }}
        
        ## Desktop Applications
        
        Cross-platform desktop applications built from commit \`${GITHUB_SHA:0:7}\`.
        
        ### Version ${{ steps.tag.outputs.tag }} Improvements:
        - Fixed macOS build issues with gettext/libintl library dependencies
        - Enhanced cross-platform compatibility and stability
        - Improved GitHub Actions CI/CD pipeline reliability
        
        ### Installation Instructions:
        
        **Windows:**
        1. Download \`ContractIntelligence-Windows.zip\`
        2. Extract to a folder on your computer
        3. Run \`ContractIntelligence.exe\`
        4. Follow the setup wizard to enter your API keys
        
        **macOS:**
        1. Download \`ContractIntelligence-macOS.zip\`
        2. Extract to see \`Contract Intelligence.app\`
        3. **IMPORTANT**: Right-click the app and select "Open" (bypasses security warning)
        4. Click "Open" when prompted about unidentified developer
        5. Follow the setup wizard to enter your API keys
        6. See MACOS_INSTALL.txt for detailed instructions
        
        ### Requirements:
        - OpenAI API Key
        - Google Cloud Vision credentials (JSON file)
        
        ### Features:
        - Contract analysis and intelligence extraction
        - Hebrew/RTL text support with proper number formatting
        - Local RAG system for document processing
        - Secure credential management
        - Cross-platform compatibility
        
        ---
        **Build Date:** $(date)  
        **Commit:** ${GITHUB_SHA}
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Contract Intelligence ${{ steps.tag.outputs.tag }}
        body_path: release_notes.md
        files: |
          artifacts/ContractIntelligence-Windows.zip
          artifacts/ContractIntelligence-macOS.zip
          MACOS_INSTALL.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
